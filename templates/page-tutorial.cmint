<!-- Interactive Tutorial Page -->
<template id="page-Tutorial">
  ##!
    compomint.addI18ns({
      'page-Tutorial': {
        'title': {
          'en': 'Interactive Compomint Tutorial',
          'ko': '대화형 Compomint 튜토리얼',
          'ja': 'インタラクティブCompomintチュートリアル',
          'zh': '交互式Compomint教程'
        },
        'subtitle': {
          'en': 'Learn Compomint through hands-on examples and live code playground',
          'ko': '실습 예제와 라이브 코드 플레이그라운드로 Compomint를 배워보세요',
          'ja': 'ハンズオン例とライブコードプレイグラウンドでCompomintを学習',
          'zh': '通过实践示例和实时代码游乐场学习Compomint'
        },
        'gettingStarted': {
          'en': 'Getting Started',
          'ko': '시작하기',
          'ja': '始める',
          'zh': '开始'
        },
        'basicUsage': {
          'en': 'Basic Usage',
          'ko': '기본 사용법',
          'ja': '基本的な使用法',
          'zh': '基本用法'
        },
        'templateSyntax': {
          'en': 'Template Syntax',
          'ko': '템플릿 문법',
          'ja': 'テンプレート構文',
          'zh': '模板语法'
        },
        'componentCreation': {
          'en': 'Component Creation',
          'ko': '컴포넌트 생성',
          'ja': 'コンポーネント作成',
          'zh': '组件创建'
        },
        'advancedFeatures': {
          'en': 'Advanced Features',
          'ko': '고급 기능',
          'ja': '高度な機能',
          'zh': '高级功能'
        },
        'tryItOut': {
          'en': 'Try it out!',
          'ko': '직접 해보세요!',
          'ja': '試してみよう！',
          'zh': '试试看！'
        },
        'backToHome': {
          'en': 'Back to Home',
          'ko': '홈으로 돌아가기',
          'ja': 'ホームに戻る',
          'zh': '返回首页'
        },
        'quickReference': {
          'en': 'Quick Reference',
          'ko': '빠른 참조',
          'ja': 'クイックリファレンス',
          'zh': '快速参考'
        },
        'templateExpressions': {
          'en': 'Template Expressions',
          'ko': '템플릿 표현식',
          'ja': 'テンプレート表現',
          'zh': '模板表达式'
        },
        'componentMethods': {
          'en': 'Component Methods',
          'ko': '컴포넌트 메서드',
          'ja': 'コンポーネントメソッド',
          'zh': '组件方法'
        }
      }
    });
  ##
  ##
    // examples 데이터는 main.js에서 주입받습니다
    const examples = data.examples || [];

    const imports = [];
    imports.push({type: 'js', text: 'https://cdn.jsdelivr.net/gh/kurukona/compomint@latest/dist/compomint.umd.min.js'});
    const outputcssPath = document.querySelectorAll('link[rel="stylesheet"]').forEach(css => {
      if (css.href.includes('css/output')) imports.push({type: 'css', text: css.href});
    });
  ##
<div class="page-Tutorial page-content">
  <div class="min-h-screen bg-gray-50 dark:bg-gray-900 py-8">
    <div class="container mx-auto px-4">
      <!-- Header -->
      <div class="text-center mb-8">
        <div class="mb-4">
          <a href="javascript:void(0)" onclick="showPage('home')" class="inline-flex items-center text-indigo-600 dark:text-indigo-400 hover:text-indigo-800 dark:hover:text-indigo-300 transition-colors">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
            </svg>
            ##=i18n.backToHome('Back to Home')##
          </a>
        </div>
        <h1 class="text-4xl font-bold mb-4 text-gray-900 dark:text-gray-100">##=i18n.title##</h1>
        <p class="text-xl text-gray-600 dark:text-gray-300 max-w-3xl mx-auto">##=i18n.subtitle##</p>
      </div>
      
      <!-- Quick Reference -->
      <div class="bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-gray-800 dark:to-gray-700 rounded-xl p-8">
        <h2 class="text-2xl font-bold text-center mb-8 text-gray-900 dark:text-gray-100">##=i18n.quickReference('Quick Reference')##</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
          <div class="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-sm">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4">##=i18n.templateExpressions('Template Expressions')##</h3>
            <div class="space-y-3 text-sm">
              <div class="flex items-start gap-3">
                <code class="bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 px-2 py-1 rounded font-mono text-xs">#\#= #\#</code>
                <span class="text-gray-600 dark:text-gray-300">Data interpolation - outputs values</span>
              </div>
              <div class="flex items-start gap-3">
                <code class="bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 px-2 py-1 rounded font-mono text-xs">#\#- #\#</code>
                <span class="text-gray-600 dark:text-gray-300">HTML escaped output - safe HTML rendering</span>
              </div>
              <div class="flex items-start gap-3">
                <code class="bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 px-2 py-1 rounded font-mono text-xs">#\#% #\#</code>
                <span class="text-gray-600 dark:text-gray-300">Element insertion - embed components</span>
              </div>
              <div class="flex items-start gap-3">
                <code class="bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 px-2 py-1 rounded font-mono text-xs">#\# #\#</code>
                <span class="text-gray-600 dark:text-gray-300">JavaScript code blocks - logic and functions</span>
              </div>
            </div>
          </div>
          
          <div class="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-sm">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4">##=i18n.componentMethods('Component Methods')##</h3>
            <div class="space-y-3 text-sm">
              <div class="flex items-start gap-3">
                <code class="bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 px-2 py-1 rounded font-mono text-xs">component.render(data)</code>
                <span class="text-gray-600 dark:text-gray-300">Re-render with new data</span>
              </div>
              <div class="flex items-start gap-3">
                <code class="bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 px-2 py-1 rounded font-mono text-xs">component.refresh(data)</code>
                <span class="text-gray-600 dark:text-gray-300">Update with partial data</span>
              </div>
              <div class="flex items-start gap-3">
                <code class="bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 px-2 py-1 rounded font-mono text-xs">component.remove()</code>
                <span class="text-gray-600 dark:text-gray-300">Remove from DOM</span>
              </div>
              <div class="flex items-start gap-3">
                <code class="bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 px-2 py-1 rounded font-mono text-xs">component.element</code>
                <span class="text-gray-600 dark:text-gray-300">Access DOM element</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Interactive Examples -->
      <div class="mt-16 space-y-12">
        ##examples.forEach((example, index) => {##
          <div class="bg-white dark:bg-gray-800 rounded-xl rounded-br-none shadow-lg overflow-hidden">
            <div class="p-6 border-b border-gray-200 dark:border-gray-700">
              <h2 class="text-2xl font-semibold text-gray-900 dark:text-gray-100 mb-2">
                ##=(index + 1)##. ##=example.title##
              </h2>
              <p class="text-gray-600 dark:text-gray-300 mb-4">##=example.description##</p>
              <div class="inline-flex items-center text-sm text-blue-600 dark:text-blue-400 font-medium bg-blue-50 dark:bg-blue-900 px-3 py-1 rounded-full">
                <svg class="w-5 h-5 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1m4 0h1m-6 4h1m4 0h1"></path>
                </svg>
                ##=i18n.tryItOut('Try it out!')##
              </div>
            </div>
            
            <div class="p-6 bg-gray-50 dark:bg-gray-700">
              <div class="resize-y overflow-hidden h-[500px] bg-white dark:bg-gray-800 rounded-lg overflow-hidden">
                ##%tmpl.cmint.Playground({
                  imports: imports.concat(example.imports || []),
                  template: null,
                  code: example.code,
                  type: 'code',
                  showConsole: example.showConsole,
                  renderingAreaOnload: (iframeWindow) => {
                    iframeWindow.compomint = iframeWindow.Compomint.compomint;
                    iframeWindow.tmpl = iframeWindow.Compomint.tmpl;

                    iframeWindow.document.body.appendChild = function(element) {
                      return iframeWindow.document.getElementById('render-container').appendChild(element);
                    };
                  }
                })##
              </div>
            </div>
          </div>
        ##})##
      </div>

    </div>
  </div>
</div>
</template>

