<template id="demo-UserManagement">
  ##!
  compomint.addI18ns({
    'demo-UserManagement': {
      'title': { 'ko': '사용자 관리 시스템', 'en': 'User Management System', 'ja': 'ユーザー管理システム', 'zh': '用户管理系统' },
      'addUser': { 'ko': '사용자 추가', 'en': 'Add User', 'ja': 'ユーザー追加', 'zh': '添加用户' },
      'searchPlaceholder': { 'ko': '사용자 검색...', 'en': 'Search users...', 'ja': 'ユーザー検索...', 'zh': '搜索用户...' },
      'noUsers': { 'ko': '사용자가 없습니다.', 'en': 'No users found.', 'ja': 'ユーザーが見つかりません。', 'zh': '未找到用户。' }
    }
  });
  ##
  
  ##
  // Initialize users data
  status.users = status.users || data.users || [];
  
  status.selectedUser = status.selectedUser || null;
  status.showForm = status.showForm || false;
  status.searchQuery = status.searchQuery || '';
  
  // Filter users based on search query
  const filteredUsers = status.users.filter(user => 
    user.name.toLowerCase().includes(status.searchQuery.toLowerCase()) ||
    user.email.toLowerCase().includes(status.searchQuery.toLowerCase())
  );

  function handleSearch(event) {
    status.searchQuery = event.target.value;

    const filteredUsers = status.users.filter(user => 
      user.name.toLowerCase().includes(status.searchQuery.toLowerCase()) ||
      user.email.toLowerCase().includes(status.searchQuery.toLowerCase())
    );

    userList.refresh({
      filteredUsers: filteredUsers
    });

    console.log(status.searchQuery, filteredUsers)
  }
  
  function showAddForm() {
    status.selectedUser = null;
    status.showForm = true;
    component.refresh();
  }
  
  function handleUserEdit(user) {
    status.selectedUser = user;
    status.showForm = true;
    component.refresh();
  }
  
  function handleUserDelete(userId) {
    if (confirm('Are you sure you want to delete this user?')) {
      status.users = status.users.filter(u => u.id !== userId);
      component.refresh();
    }
  }
  
  function handleFormSubmit(userData) {
    if (userData.id) {
      // Edit existing user
      const index = status.users.findIndex(u => u.id === userData.id);
      if (index !== -1) {
        status.users[index] = userData;
      }
    } else {
      // Add new user
      userData.id = Date.now();
      status.users.push(userData);
    }
    
    status.showForm = false;
    status.selectedUser = null;
    component.refresh();
  }
  
  function handleFormCancel() {
    status.showForm = false;
    status.selectedUser = null;
    component.refresh();
  }

  const userList = tmpl.demo.UserList({
    filteredUsers: filteredUsers,
    handleUserEdit: handleUserEdit,
    handleUserDelete: handleUserDelete
  });
  ##
  
  <div class="user-management bg-white dark:bg-gray-800 p-6 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 max-w-6xl mx-auto">
    <div class="mb-6">
      <h2 class="text-2xl font-bold text-gray-900 dark:text-gray-100 mb-4">##=i18n.title##</h2>
      
      <!-- Search and Add User Controls -->
      <div class="flex flex-col sm:flex-row gap-4 mb-6">
        <div class="flex-1">
          <input 
            type="text" 
            placeholder="##=i18n.searchPlaceholder##"
            value="##=status.searchQuery##"
            class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-100"
            data-co-event="##:{input: handleSearch}##"
          />
        </div>
        <button 
          class="bg-blue-500 hover:bg-blue-600 text-white px-6 py-2 rounded-md transition-colors"
          data-co-event="##:{click: showAddForm}##"
        >
          ##=i18n.addUser##
        </button>
      </div>
    </div>
    
    ##if (status.showForm) {##
      <!-- User Form -->
      <div class="mb-6">
        ##%tmpl.demo.UserForm({
          user: status.selectedUser,
          onSubmit: handleFormSubmit,
          onCancel: handleFormCancel
        })##
      </div>
    ##}##
    
    <!-- User List -->
    <div class="mb-6">
      ##%userList##
    </div>
    
    <!-- Statistics Dashboard -->
    <div class="mt-8">
      ##%tmpl.demo.UserStats({
        totalUsers: status.users.length,
        activeUsers: status.users.filter(u => u.active).length,
        recentUsers: status.users.filter(u => {
          const daysSinceJoined = (Date.now() - new Date(u.joinDate).getTime()) / (1000 * 60 * 60 * 24);
          return daysSinceJoined <= 30;
        }).length
      })##
    </div>
  </div>
</template>



<template id="demo-UserCard">
  ##!
  compomint.addI18ns({
    'demo-UserCard': {
      'edit': { 'ko': '편집', 'en': 'Edit', 'ja': '編集', 'zh': '编辑' },
      'delete': { 'ko': '삭제', 'en': 'Delete', 'ja': '削除', 'zh': '删除' },
      'active': { 'ko': '활성', 'en': 'Active', 'ja': 'アクティブ', 'zh': '活跃' },
      'inactive': { 'ko': '비활성', 'en': 'Inactive', 'ja': '非アクティブ', 'zh': '不活跃' },
      'joinDate': { 'ko': '가입일', 'en': 'Join Date', 'ja': '参加日', 'zh': '加入日期' },
      'role': { 'ko': '역할', 'en': 'Role', 'ja': '役割', 'zh': '角色' },
      'admin': { 'ko': '관리자', 'en': 'Admin', 'ja': '管理者', 'zh': '管理员' },
      'moderator': { 'ko': '조정자', 'en': 'Moderator', 'ja': 'モデレーター', 'zh': '版主' },
      'user': { 'ko': '사용자', 'en': 'User', 'ja': 'ユーザー', 'zh': '用户' }
    }
  });
  ##
  
  ##
  function handleEdit(event) {
    if (data.onEdit) {
      data.onEdit(data.user);
    }
  }
  
  function handleDelete(event) {
    if (data.onDelete) {
      data.onDelete(data.user.id);
    }
  }
  
  function getRoleColor(role) {
    switch(role) {
      case 'admin': return 'bg-red-500';
      case 'moderator': return 'bg-yellow-500';
      case 'user': return 'bg-blue-500';
      default: return 'bg-gray-500';
    }
  }
  
  function getRoleText(role) {
    switch(role) {
      case 'admin': return i18n.admin;
      case 'moderator': return i18n.moderator;
      case 'user': return i18n.user;
      default: return role;
    }
  }
  ##
  
  <div class="user-card bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md border border-gray-200 dark:border-gray-700 hover:shadow-lg transition-shadow">
    <div class="flex items-center mb-4">
      <div class="w-12 h-12 ##=getRoleColor(data.user.role)## rounded-full flex items-center justify-center text-white font-bold text-lg">
        ##=data.user.name.charAt(0).toUpperCase()##
      </div>
      <div class="ml-4 flex-1">
        <h4 class="text-lg font-semibold text-gray-900 dark:text-gray-100">##=data.user.name##</h4>
        <p class="text-sm text-gray-600 dark:text-gray-400">##=data.user.email##</p>
      </div>
    </div>
    
    <div class="space-y-2 mb-4">
      <div class="flex items-center justify-between">
        <span class="text-sm text-gray-600 dark:text-gray-400">##=i18n.role##:</span>
        <span class="text-sm font-medium px-2 py-1 rounded-full text-white ##=getRoleColor(data.user.role)##">
          ##=getRoleText(data.user.role)##
        </span>
      </div>
      
      <div class="flex items-center justify-between">
        <span class="text-sm text-gray-600 dark:text-gray-400">##=i18n.joinDate##:</span>
        <span class="text-sm font-medium text-gray-900 dark:text-gray-100">
          ##=new Date(data.user.joinDate).toLocaleDateString()##
        </span>
      </div>
      
      <div class="flex items-center justify-between">
        <span class="text-sm text-gray-600 dark:text-gray-400">Status:</span>
        <span class="text-sm font-medium ##=data.user.active ? 'text-green-600' : 'text-red-600'##">
          ##=data.user.active ? i18n.active : i18n.inactive##
        </span>
      </div>
    </div>
    
    <div class="flex space-x-2">
      <button 
        class="flex-1 bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded text-sm transition-colors"
        data-co-event="##:{click: handleEdit}##"
      >
        ##=i18n.edit##
      </button>
      <button 
        class="flex-1 bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded text-sm transition-colors"
        data-co-event="##:{click: handleDelete}##"
      >
        ##=i18n.delete##
      </button>
    </div>
  </div>
</template>


<template id="demo-UserForm">
  <style id="style-demo-UserForm">
    .slide-in { animation: slideIn 0.3s ease-out; }
    @keyframes slideIn { from { transform: translateX(100%); opacity: 0; } to { transform: translateX(0); opacity: 1; } }
  </style>
  ##!
  compomint.addI18ns({
    'demo-UserForm': {
      'addUser': { 'ko': '사용자 추가', 'en': 'Add User', 'ja': 'ユーザー追加', 'zh': '添加用户' },
      'editUser': { 'ko': '사용자 편집', 'en': 'Edit User', 'ja': 'ユーザー編集', 'zh': '编辑用户' },
      'name': { 'ko': '이름', 'en': 'Name', 'ja': '名前', 'zh': '姓名' },
      'email': { 'ko': '이메일', 'en': 'Email', 'ja': 'メール', 'zh': '邮箱' },
      'role': { 'ko': '역할', 'en': 'Role', 'ja': '役割', 'zh': '角色' },
      'active': { 'ko': '활성 상태', 'en': 'Active Status', 'ja': 'アクティブ状態', 'zh': '活跃状态' },
      'save': { 'ko': '저장', 'en': 'Save', 'ja': '保存', 'zh': '保存' },
      'cancel': { 'ko': '취소', 'en': 'Cancel', 'ja': 'キャンセル', 'zh': '取消' },
      'admin': { 'ko': '관리자', 'en': 'Admin', 'ja': '管理者', 'zh': '管理员' },
      'moderator': { 'ko': '조정자', 'en': 'Moderator', 'ja': 'モデレーター', 'zh': '版主' },
      'user': { 'ko': '사용자', 'en': 'User', 'ja': 'ユーザー', 'zh': '用户' }
    }
  });
  ##
  
  ##
  const isEdit = data.user && data.user.id;
  
  // Initialize form data
  status.formData = status.formData || {
    name: data.user?.name || '',
    email: data.user?.email || '',
    role: data.user?.role || 'user',
    active: data.user?.active !== undefined ? data.user.active : true
  };
  
  function handleSubmit(event) {
    event.preventDefault();
    const formData = new FormData(event.target);
    
    const userData = {
      id: data.user?.id || null,
      name: formData.get('name'),
      email: formData.get('email'),
      role: formData.get('role'),
      active: formData.get('active') === 'on',
      joinDate: data.user?.joinDate || new Date().toISOString()
    };
    
    if (data.onSubmit) {
      data.onSubmit(userData);
    }
    
    // Reset form data
    status.formData = {
      name: '',
      email: '',
      role: 'user',
      active: true
    };
  }
  
  function handleCancel() {
    if (data.onCancel) {
      data.onCancel();
    }
    
    // Reset form data
    status.formData = {
      name: '',
      email: '',
      role: 'user',
      active: true
    };
  }
  
  function handleInputChange(event) {
    const name = event.target.name;
    const value = event.target.type === 'checkbox' ? event.target.checked : event.target.value;
    status.formData[name] = value;
  }
  ##
  <div class="absolute inset-0 z-50 flex items-center justify-center modal-overlay bg-black bg-opacity-50">
    <div class="user-form bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md border border-gray-200 dark:border-gray-700 w-full max-w-md slide-in">
      <h3 class="text-xl font-semibold mb-4 text-gray-900 dark:text-gray-100">
        ##=isEdit ? i18n.editUser : i18n.addUser##
      </h3>
      
      <form data-co-event="##:{submit: handleSubmit}##" class="space-y-4">
        <div>
          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
            ##=i18n.name##
          </label>
          <input 
            type="text" 
            name="name" 
            value="##=status.formData.name##"
            class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-100"
            data-co-event="##:{input: handleInputChange}##"
            required
          />
        </div>
        
        <div>
          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
            ##=i18n.email##
          </label>
          <input 
            type="email" 
            name="email" 
            value="##=status.formData.email##"
            class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-100"
            data-co-event="##:{input: handleInputChange}##"
            required
          />
        </div>
        
        <div>
          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
            ##=i18n.role##
          </label>
          <select 
            name="role" 
            value="##=status.formData.role##"
            class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-gray-100"
            data-co-event="##:{change: handleInputChange}##"
          >
            <option value="user">##=i18n.user##</option>
            <option value="moderator">##=i18n.moderator##</option>
            <option value="admin">##=i18n.admin##</option>
          </select>
        </div>
        
        <div>
          <label class="flex items-center">
            <input 
              type="checkbox" 
              name="active" 
              ##=status.formData.active ? 'checked' : ''##
              class="mr-2"
              data-co-event="##:{change: handleInputChange}##"
            />
            <span class="text-sm font-medium text-gray-700 dark:text-gray-300">##=i18n.active##</span>
          </label>
        </div>
        
        <div class="flex space-x-2 pt-4">
          <button 
            type="submit"
            class="flex-1 bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded transition-colors"
          >
            ##=i18n.save##
          </button>
          <button 
            type="button"
            class="flex-1 bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded transition-colors"
            data-co-event="##:{click: handleCancel}##"
          >
            ##=i18n.cancel##
          </button>
        </div>
      </form>
    </div>
  </div>
</template>


<template id="demo-UserList">
  ##!
  compomint.addI18ns({
    'demo-UserList': {
      'userList': { 'ko': '사용자 목록', 'en': 'User List', 'ja': 'ユーザーリスト', 'zh': '用户列表' },
    }
  });
  ##
  ##
  const filteredUsers = data.filteredUsers;
  const handleUserEdit = data.handleUserEdit;
  const handleUserDelete = data.handleUserDelete;
  ##
  <div class="demo-UserList">
    <h3 class="text-xl font-semibold mb-4 text-gray-900 dark:text-gray-100">##=i18n.userList##</h3>
  ##if (filteredUsers.length === 0) {##
    <div class="text-center py-8 text-gray-500 dark:text-gray-400">
      ##=i18n.noUsers##
    </div>
  ##} else {##
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
      ##filteredUsers.forEach(user => {##
        ##%tmpl.demo.UserCard({
          user: user,
          onEdit: () => handleUserEdit(user),
          onDelete: () => handleUserDelete(user.id)
        })##
      ##})##
    </div>
  ##}##
  </div>
</template>

<template id="demo-UserStats">
  ##!
  compomint.addI18ns({
    'demo-UserStats': {
      'statistics': { 'ko': '통계', 'en': 'Statistics', 'ja': '統計', 'zh': '统计' },
      'totalUsers': { 'ko': '총 사용자', 'en': 'Total Users', 'ja': '総ユーザー', 'zh': '总用户' },
      'activeUsers': { 'ko': '활성 사용자', 'en': 'Active Users', 'ja': 'アクティブユーザー', 'zh': '活跃用户' },
      'recentUsers': { 'ko': '최근 가입자', 'en': 'Recent Users', 'ja': '最近のユーザー', 'zh': '最近用户' },
      'inactiveUsers': { 'ko': '비활성 사용자', 'en': 'Inactive Users', 'ja': '非アクティブユーザー', 'zh': '不活跃用户' }
    }
  });
  ##
  
  ##
  const inactiveUsers = data.totalUsers - data.activeUsers;
  const activePercentage = data.totalUsers > 0 ? Math.round((data.activeUsers / data.totalUsers) * 100) : 0;
  ##
  
  <div class="user-stats bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md border border-gray-200 dark:border-gray-700">
    <h3 class="text-xl font-semibold mb-6 text-gray-900 dark:text-gray-100">##=i18n.statistics##</h3>
    
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
      <div class="text-center p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
        <div class="text-3xl font-bold text-blue-600 dark:text-blue-400">##=data.totalUsers##</div>
        <div class="text-sm text-gray-600 dark:text-gray-400 mt-1">##=i18n.totalUsers##</div>
      </div>
      
      <div class="text-center p-4 bg-green-50 dark:bg-green-900/20 rounded-lg">
        <div class="text-3xl font-bold text-green-600 dark:text-green-400">##=data.activeUsers##</div>
        <div class="text-sm text-gray-600 dark:text-gray-400 mt-1">##=i18n.activeUsers##</div>
        <div class="text-xs text-gray-500 dark:text-gray-500 mt-1">##=activePercentage##%</div>
      </div>
      
      <div class="text-center p-4 bg-red-50 dark:bg-red-900/20 rounded-lg">
        <div class="text-3xl font-bold text-red-600 dark:text-red-400">##=inactiveUsers##</div>
        <div class="text-sm text-gray-600 dark:text-gray-400 mt-1">##=i18n.inactiveUsers##</div>
        <div class="text-xs text-gray-500 dark:text-gray-500 mt-1">##=100 - activePercentage##%</div>
      </div>
      
      <div class="text-center p-4 bg-purple-50 dark:bg-purple-900/20 rounded-lg">
        <div class="text-3xl font-bold text-purple-600 dark:text-purple-400">##=data.recentUsers##</div>
        <div class="text-sm text-gray-600 dark:text-gray-400 mt-1">##=i18n.recentUsers##</div>
        <div class="text-xs text-gray-500 dark:text-gray-500 mt-1">Last 30 days</div>
      </div>
    </div>
    
    <!-- Activity Chart (Simple progress bar) -->
    <div class="mt-6">
      <div class="flex justify-between items-center mb-2">
        <span class="text-sm font-medium text-gray-700 dark:text-gray-300">User Activity</span>
        <span class="text-sm text-gray-600 dark:text-gray-400">##=activePercentage##% Active</span>
      </div>
      <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2">
        <div 
          class="bg-green-500 h-2 rounded-full transition-all duration-500" 
          style="width: ##=activePercentage##%"
        ></div>
      </div>
    </div>
  </div>
</template>
